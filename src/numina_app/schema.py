""" This schema should greatly reduce the data pre-processing necessary for each new dataframe """
from ast import literal_eval
from datetime import datetime

import numpy as np
import pandas as pd
import pandera as pa
from pandera import Check, Column, DataFrameSchema
from pandera.typing import DateTime

data_schema = DataFrameSchema(
    columns={
        "trackid": Column(
            str, checks=Check.str_length(32), nullable=False
        ),  # this is likely autogenerated, but ensure that no row comes without trackid
        "date": Column(DateTime),
        "time": Column(DateTime),
        "class": Column(pd.CategoricalDtype),
        "box": Column(
            str, nullable=False
        ),  # enforcing nullable = False for ast.literal_eval
        "bottom_center": Column(
            str, nullable=False
        ),  # enforcing nullable = False for ast.literal_eval
        "geo_bottom_center": Column(str, nullable=False),
    },
    strict=True,
    coerce=True,
)


@pa.check_input(data_schema)
def format_data(data: pd.DataFrame, xmax=640, ymax=480) -> pd.DataFrame:
    """"""
    data.loc[:, "time"] = data.time.dt.time
    data.loc[:, "datetime"] = [
        datetime.combine(date, time)
        for date, time in zip(data.loc[:, "date"], data.loc[:, "time"])
    ]

    # Assert all coordinates are within desired shape
    data.loc[:, "box"] = data["box"].apply(literal_eval)
    data.loc[:, "bottom_center"] = data["bottom_center"].apply(literal_eval)
    data.loc[:, "geo_bottom_center"] = data["geo_bottom_center"].apply(literal_eval)

    # Verify coordinates within correct values (otherwise, need scaling, type conversion etc)
    # This process could easily be done in as a Check in data_schema
    max_val = max(xmax, ymax)

    box_array = np.array([*data.box])
    assert (
        True  # that all boxes are within bounds. (this might not be necessarily true)
    )
    bc_array = np.array([*data.bottom_center])
    assert True  # that all `bottom_center` are inside the frame. (this might not be necessarily true)
    return data
